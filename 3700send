#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json
import datetime

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = 0

#Things to try and change!
window_size = 500000
time_out = .5 


packet_buffer = {} 
sockets = []
packet_timestamp = {}
used_window = 0

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)
sockets.append(sock)

def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def send_next_packet():
    global SEQUENCE
    global used_window
    global packet_buffer
    global ack

    data = sys.stdin.read(DATA_SIZE)
    if (len(data) > 0):
        decode_msg = {"sequence": SEQUENCE, "data": data, "ack": False, "eof": False}
        msg = json.dumps(decode_msg)
        SEQUENCE += len(data)
        packet_buffer[SEQUENCE] = decode_msg
        used_window += len(data)
        packet_timestamp[SEQUENCE] = datetime.datetime.now() 
        log("used window is now " + str(used_window))
        if sock.sendto(msg, dest) < len(msg):
            log("[error] unable to fully send packet")
        else:
            log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
        return True
    else:
        log("No data to currently send")
        return False

def resend_packet(seq_num):
    msg = json.dumps(packet_buffer[seq_num])
    packet_timestamp[seq_num] = datetime.datetime.now()
    if sock.sendto(msg, dest) < len(msg):
        log("[error] unable to fully send packet")
    else:
        #log("[send data] " + str(seq_num) + " (" + str(len(data)) + ")")
        log("[send data] " + str(seq_num))

def ack_packets(ack_num):
    global packet_buffer
    global used_window

    for seq in packet_buffer.keys():
        if seq <= ack_num:
            log("Acking seq number " + str(seq))
            length = len(packet_buffer[ack_num]["data"])
            used_window -= length 
            del packet_buffer[ack_num]
            del packet_timestamp[seq] 


# Send first packet
send_next_packet()
done = 0
# Now read in data, send packets
while True:
    log("ABOUT TO SLEEP")

    while (used_window <= window_size - MSG_SIZE):
        if (not send_next_packet()):
            done = 1
            break

    # Break if no more data and there are no unacked packets
    if (done == 1) and (len(packet_buffer) == 0):
        break

    ready, ignore, ignore2 = select.select(sockets, [], [], .01)
    #log("ready length is " + str(len(ready)))
    while len(ready) != 0: 
        result = sock.recvfrom(MSG_SIZE)
        #log("result is " + str(result))
        if result:
            (data, addr) = result
            try:
                #log("trying to decode...")
                decoded = json.loads(data)
    
            # If there is an ack, send next packet
                ack = decoded['ack']
                if ack in packet_buffer.keys():
                    log("[recv ack] " + str(ack))
                    ack_packets(ack)
            except (ValueError, KeyError, TypeError):
                log("[recv corrupt packet]" )
        else:
            log("[error] timeout")
            sys.exit(-1)
        ready, ignore, ignore2 = select.select(sockets, [], [], 1)
        #log("ready length is " + str(len(ready)))

    #check if oldest packet is timed out
    for seq_num in packet_timestamp: 
        time_diff = datetime.datetime.now() - packet_timestamp[seq_num] 
        #log("time diff is " + str(time_diff.total_seconds()))
        if time_diff.total_seconds() > time_out:
            log("Resending due to timeout, seq_num: " + str(seq_num))
            resend_packet(seq_num)

sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
sys.exit(0)
